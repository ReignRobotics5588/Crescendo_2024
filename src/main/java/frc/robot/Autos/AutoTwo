package frc.robot.Autos;
package frc.limelight; 
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.commands.DriveCommand;
import frc.robot.commands.ShootSpeaker;
import frc.robot.subsystems.Drivetrain;
import frc.robot.subsystems.Shooter;
import frc.robot.subsystems.Intake;
import edu.wpi.first.wpilibj2.command.Commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;

public class ShootAuto extends SequentialCommandGroup {

    public ShootAuto(Drivetrain drivetrain, Shooter shooter, Intake intake){
        // private final Command m_autonomousCommand = new DriveCommand(m_Drivetrain, 60, 0.7);
        // public DriveCommand(Drivetrain D, int d, double s, double a)
        // public DriveCommand(drivetrain, distance, speed, angle)

        addCommands (
            new ShootSpeaker(shooter, intake); // shoots first at angle
            (Command) new DriveCommand(drivetrain, 0, 0.5, -35), // in inches, turns down 
            (Command) new DriveCommand(drivetrain, 121, 0.5, 0), 
            (Command) new IntakeWithBeam(shooter, intake),
            (Command) new DriveCommand(drivetrain, -121, 0.5, 0), // going back to 2nd position
            (Command) new DriveCommand(drivetrain, 0, 0.5, 35), // turning 35 
            new ShootSpeaker(shooter, intake) // shoots
        );

        // could do a constructor to intake limelight values but continuously update
        // method to calculate the angle with new distance values, height never changes

        // more efficient in terms of battery saving

        
        addCommands(
            // drives to location
            (Command) new DriveCommand(drivetrain, 85, 0.5, 0),
            // turns up ^ 30 degrees
            (Command) new DriveCommand(drivetrain, 0, 0.5, 30),
            // shoot 1
            new ShootSpeaker(shooter, intake), 
            // turns down v 30 degrees
            (Command) new DriveCommand(drivetrain, 0, 0.5, -30),
            // drives x inches past target intake
            (Command) new DriveCommand(drivetrain, 10, 0.5, 0), 
            // intakes note
            (Command) new IntakeWithBeam(shooter, intake),
            // turns new angle 25/27 degrees ^
            (Command) new DriveCommand(drivetrain, 0, 0.5, 25)
            // shoot 2
            new ShootSpeaker(shooter, intake)
        )
    }
    
}
